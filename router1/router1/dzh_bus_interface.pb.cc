// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dzh_bus_interface.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dzh_bus_interface.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dzh_bus_interface {

namespace {

const ::google::protobuf::Descriptor* Bus_Head_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bus_Head_reflection_ = NULL;
const ::google::protobuf::Descriptor* Body_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Body_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceRouteReqSToV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceRouteReqSToV_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceRouteRspSToV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceRouteRspSToV_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceRouteReqVToS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceRouteReqVToS_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceRouteStatusNty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceRouteStatusNty_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceRouteReqVToV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceRouteReqVToV_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceRouteRspVToV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceRouteRspVToV_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dzh_5fbus_5finterface_2eproto() {
  protobuf_AddDesc_dzh_5fbus_5finterface_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dzh_bus_interface.proto");
  GOOGLE_CHECK(file != NULL);
  Bus_Head_descriptor_ = file->message_type(0);
  static const int Bus_Head_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bus_Head, bodytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bus_Head, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bus_Head, endflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bus_Head, body_),
  };
  Bus_Head_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bus_Head_descriptor_,
      Bus_Head::default_instance_,
      Bus_Head_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bus_Head, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bus_Head, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bus_Head));
  Body_descriptor_ = file->message_type(1);
  static const int Body_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, loginreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, loginrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, logoutreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, logoutrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, serviceroutereqstov_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, servicerouterspstov_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, serviceroutereqvtos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, serviceroutestatusnty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, serviceroutereqvtov_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, servicerouterspvtov_),
  };
  Body_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Body_descriptor_,
      Body::default_instance_,
      Body_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Body));
  RspInfo_descriptor_ = file->message_type(2);
  static const int RspInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspInfo, rspno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspInfo, rspdesc_),
  };
  RspInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspInfo_descriptor_,
      RspInfo::default_instance_,
      RspInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspInfo));
  LoginReq_descriptor_ = file->message_type(3);
  static const int LoginReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, routerno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, serverno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, serviceno_),
  };
  LoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginReq_descriptor_,
      LoginReq::default_instance_,
      LoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginReq));
  LoginRsp_descriptor_ = file->message_type(4);
  static const int LoginRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, rspinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, sessionno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, routerno_),
  };
  LoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRsp_descriptor_,
      LoginRsp::default_instance_,
      LoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRsp));
  LogoutReq_descriptor_ = file->message_type(5);
  static const int LogoutReq_offsets_[1] = {
  };
  LogoutReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutReq_descriptor_,
      LogoutReq::default_instance_,
      LogoutReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutReq));
  LogoutRsp_descriptor_ = file->message_type(6);
  static const int LogoutRsp_offsets_[1] = {
  };
  LogoutRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutRsp_descriptor_,
      LogoutRsp::default_instance_,
      LogoutRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutRsp));
  ServiceRouteReqSToV_descriptor_ = file->message_type(7);
  static const int ServiceRouteReqSToV_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqSToV, destrouterno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqSToV, destserverno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqSToV, destsessionno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqSToV, serviceno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqSToV, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqSToV, serviceflags_),
  };
  ServiceRouteReqSToV_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceRouteReqSToV_descriptor_,
      ServiceRouteReqSToV::default_instance_,
      ServiceRouteReqSToV_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqSToV, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqSToV, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceRouteReqSToV));
  ServiceRouteRspSToV_descriptor_ = file->message_type(8);
  static const int ServiceRouteRspSToV_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteRspSToV, rspinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteRspSToV, destrouterno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteRspSToV, destserverno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteRspSToV, destsessionno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteRspSToV, serviceno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteRspSToV, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteRspSToV, serviceflags_),
  };
  ServiceRouteRspSToV_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceRouteRspSToV_descriptor_,
      ServiceRouteRspSToV::default_instance_,
      ServiceRouteRspSToV_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteRspSToV, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteRspSToV, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceRouteRspSToV));
  ServiceRouteReqVToS_descriptor_ = file->message_type(9);
  static const int ServiceRouteReqVToS_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqVToS, srcrouterno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqVToS, srcserverno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqVToS, srcsessionno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqVToS, serviceno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqVToS, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqVToS, serviceflags_),
  };
  ServiceRouteReqVToS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceRouteReqVToS_descriptor_,
      ServiceRouteReqVToS::default_instance_,
      ServiceRouteReqVToS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqVToS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqVToS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceRouteReqVToS));
  ServiceRouteStatusNty_descriptor_ = file->message_type(10);
  static const int ServiceRouteStatusNty_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteStatusNty, routerno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteStatusNty, seqno_),
  };
  ServiceRouteStatusNty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceRouteStatusNty_descriptor_,
      ServiceRouteStatusNty::default_instance_,
      ServiceRouteStatusNty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteStatusNty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteStatusNty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceRouteStatusNty));
  ServiceRouteReqVToV_descriptor_ = file->message_type(11);
  static const int ServiceRouteReqVToV_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqVToV, srcrouterno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqVToV, srcsessionno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqVToV, srcserverno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqVToV, destrouterno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqVToV, destsessionno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqVToV, destserverno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqVToV, serviceno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqVToV, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqVToV, serviceflags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqVToV, ttl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqVToV, protocolno_),
  };
  ServiceRouteReqVToV_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceRouteReqVToV_descriptor_,
      ServiceRouteReqVToV::default_instance_,
      ServiceRouteReqVToV_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqVToV, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteReqVToV, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceRouteReqVToV));
  ServiceRouteRspVToV_descriptor_ = file->message_type(12);
  static const int ServiceRouteRspVToV_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteRspVToV, rspinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteRspVToV, srcrouterno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteRspVToV, srcsessionno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteRspVToV, srcserverno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteRspVToV, destrouterno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteRspVToV, destsessionno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteRspVToV, destserverno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteRspVToV, serviceno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteRspVToV, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteRspVToV, serviceflags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteRspVToV, ttl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteRspVToV, protocolno_),
  };
  ServiceRouteRspVToV_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceRouteRspVToV_descriptor_,
      ServiceRouteRspVToV::default_instance_,
      ServiceRouteRspVToV_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteRspVToV, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRouteRspVToV, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceRouteRspVToV));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dzh_5fbus_5finterface_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bus_Head_descriptor_, &Bus_Head::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Body_descriptor_, &Body::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspInfo_descriptor_, &RspInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginReq_descriptor_, &LoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRsp_descriptor_, &LoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutReq_descriptor_, &LogoutReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutRsp_descriptor_, &LogoutRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceRouteReqSToV_descriptor_, &ServiceRouteReqSToV::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceRouteRspSToV_descriptor_, &ServiceRouteRspSToV::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceRouteReqVToS_descriptor_, &ServiceRouteReqVToS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceRouteStatusNty_descriptor_, &ServiceRouteStatusNty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceRouteReqVToV_descriptor_, &ServiceRouteReqVToV::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceRouteRspVToV_descriptor_, &ServiceRouteRspVToV::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dzh_5fbus_5finterface_2eproto() {
  delete Bus_Head::default_instance_;
  delete Bus_Head_reflection_;
  delete Body::default_instance_;
  delete Body_reflection_;
  delete RspInfo::default_instance_;
  delete RspInfo_reflection_;
  delete LoginReq::default_instance_;
  delete LoginReq_reflection_;
  delete LoginRsp::default_instance_;
  delete LoginRsp_reflection_;
  delete LogoutReq::default_instance_;
  delete LogoutReq_reflection_;
  delete LogoutRsp::default_instance_;
  delete LogoutRsp_reflection_;
  delete ServiceRouteReqSToV::default_instance_;
  delete ServiceRouteReqSToV_reflection_;
  delete ServiceRouteRspSToV::default_instance_;
  delete ServiceRouteRspSToV_reflection_;
  delete ServiceRouteReqVToS::default_instance_;
  delete ServiceRouteReqVToS_reflection_;
  delete ServiceRouteStatusNty::default_instance_;
  delete ServiceRouteStatusNty_reflection_;
  delete ServiceRouteReqVToV::default_instance_;
  delete ServiceRouteReqVToV_reflection_;
  delete ServiceRouteRspVToV::default_instance_;
  delete ServiceRouteRspVToV_reflection_;
}

void protobuf_AddDesc_dzh_5fbus_5finterface_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027dzh_bus_interface.proto\022\021dzh_bus_inter"
    "face\"g\n\010Bus_Head\022\020\n\010BodyType\030\001 \002(\r\022\021\n\tRe"
    "questID\030\002 \002(\r\022\017\n\007EndFlag\030\003 \002(\r\022%\n\004body\030\004"
    " \001(\0132\027.dzh_bus_interface.Body\"\350\004\n\004Body\022-"
    "\n\010loginReq\030\001 \001(\0132\033.dzh_bus_interface.Log"
    "inReq\022-\n\010loginRsp\030\002 \001(\0132\033.dzh_bus_interf"
    "ace.LoginRsp\022/\n\tlogoutReq\030\003 \001(\0132\034.dzh_bu"
    "s_interface.LogoutReq\022/\n\tlogoutRsp\030\004 \001(\013"
    "2\034.dzh_bus_interface.LogoutRsp\022C\n\023servic"
    "eRouteReqSToV\030\005 \001(\0132&.dzh_bus_interface."
    "ServiceRouteReqSToV\022C\n\023serviceRouteRspST"
    "oV\030\006 \001(\0132&.dzh_bus_interface.ServiceRout"
    "eRspSToV\022C\n\023serviceRouteReqVToS\030\007 \001(\0132&."
    "dzh_bus_interface.ServiceRouteReqVToS\022G\n"
    "\025serviceRouteStatusNty\030\010 \001(\0132(.dzh_bus_i"
    "nterface.ServiceRouteStatusNty\022C\n\023servic"
    "eRouteReqVToV\030\t \001(\0132&.dzh_bus_interface."
    "ServiceRouteReqVToV\022C\n\023serviceRouteRspVT"
    "oV\030\n \001(\0132&.dzh_bus_interface.ServiceRout"
    "eRspVToV\")\n\007RspInfo\022\r\n\005RspNo\030\001 \002(\r\022\017\n\007Rs"
    "pDesc\030\002 \002(\t\"A\n\010LoginReq\022\020\n\010RouterNo\030\001 \001("
    "\r\022\020\n\010ServerNo\030\002 \001(\r\022\021\n\tServiceNo\030\003 \003(\r\"\\"
    "\n\010LoginRsp\022+\n\007rspInfo\030\001 \002(\0132\032.dzh_bus_in"
    "terface.RspInfo\022\021\n\tSessionNo\030\002 \001(\r\022\020\n\010Ro"
    "uterNo\030\003 \001(\r\"\013\n\tLogoutReq\"\013\n\tLogoutRsp\"\220"
    "\001\n\023ServiceRouteReqSToV\022\024\n\014DestRouterNo\030\001"
    " \001(\r\022\024\n\014DestServerNo\030\002 \001(\r\022\025\n\rDestSessio"
    "nNo\030\003 \001(\r\022\021\n\tServiceNo\030\004 \001(\r\022\r\n\005SeqNo\030\005 "
    "\001(\r\022\024\n\014ServiceFlags\030\006 \001(\r\"\275\001\n\023ServiceRou"
    "teRspSToV\022+\n\007rspInfo\030\001 \002(\0132\032.dzh_bus_int"
    "erface.RspInfo\022\024\n\014DestRouterNo\030\002 \001(\r\022\024\n\014"
    "DestServerNo\030\003 \001(\r\022\025\n\rDestSessionNo\030\004 \001("
    "\r\022\021\n\tServiceNo\030\005 \001(\r\022\r\n\005SeqNo\030\006 \001(\r\022\024\n\014S"
    "erviceFlags\030\007 \001(\r\"\215\001\n\023ServiceRouteReqVTo"
    "S\022\023\n\013SrcRouterNo\030\001 \001(\r\022\023\n\013SrcServerNo\030\002 "
    "\001(\r\022\024\n\014SrcSessionNo\030\003 \001(\r\022\021\n\tServiceNo\030\004"
    " \001(\r\022\r\n\005SeqNo\030\005 \001(\r\022\024\n\014ServiceFlags\030\006 \001("
    "\r\"8\n\025ServiceRouteStatusNty\022\020\n\010RouterNo\030\001"
    " \001(\r\022\r\n\005SeqNo\030\002 \001(\r\"\361\001\n\023ServiceRouteReqV"
    "ToV\022\023\n\013SrcRouterNo\030\001 \001(\r\022\024\n\014SrcSessionNo"
    "\030\002 \001(\r\022\023\n\013SrcServerNo\030\003 \001(\r\022\024\n\014DestRoute"
    "rNo\030\004 \001(\r\022\025\n\rDestSessionNo\030\005 \001(\r\022\024\n\014Dest"
    "ServerNo\030\006 \001(\r\022\021\n\tServiceNo\030\007 \001(\r\022\r\n\005Seq"
    "No\030\010 \001(\r\022\024\n\014ServiceFlags\030\t \001(\r\022\013\n\003TTL\030\n "
    "\001(\t\022\022\n\nProtocolNo\030\013 \001(\r\"\236\002\n\023ServiceRoute"
    "RspVToV\022+\n\007rspInfo\030\001 \002(\0132\032.dzh_bus_inter"
    "face.RspInfo\022\023\n\013SrcRouterNo\030\002 \001(\r\022\024\n\014Src"
    "SessionNo\030\003 \001(\r\022\023\n\013SrcServerNo\030\004 \001(\r\022\024\n\014"
    "DestRouterNo\030\005 \001(\r\022\025\n\rDestSessionNo\030\006 \001("
    "\r\022\024\n\014DestServerNo\030\007 \001(\r\022\021\n\tServiceNo\030\010 \001"
    "(\r\022\r\n\005SeqNo\030\t \001(\r\022\024\n\014ServiceFlags\030\n \001(\r\022"
    "\013\n\003TTL\030\013 \001(\t\022\022\n\nProtocolNo\030\014 \001(\r", 2072);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dzh_bus_interface.proto", &protobuf_RegisterTypes);
  Bus_Head::default_instance_ = new Bus_Head();
  Body::default_instance_ = new Body();
  RspInfo::default_instance_ = new RspInfo();
  LoginReq::default_instance_ = new LoginReq();
  LoginRsp::default_instance_ = new LoginRsp();
  LogoutReq::default_instance_ = new LogoutReq();
  LogoutRsp::default_instance_ = new LogoutRsp();
  ServiceRouteReqSToV::default_instance_ = new ServiceRouteReqSToV();
  ServiceRouteRspSToV::default_instance_ = new ServiceRouteRspSToV();
  ServiceRouteReqVToS::default_instance_ = new ServiceRouteReqVToS();
  ServiceRouteStatusNty::default_instance_ = new ServiceRouteStatusNty();
  ServiceRouteReqVToV::default_instance_ = new ServiceRouteReqVToV();
  ServiceRouteRspVToV::default_instance_ = new ServiceRouteRspVToV();
  Bus_Head::default_instance_->InitAsDefaultInstance();
  Body::default_instance_->InitAsDefaultInstance();
  RspInfo::default_instance_->InitAsDefaultInstance();
  LoginReq::default_instance_->InitAsDefaultInstance();
  LoginRsp::default_instance_->InitAsDefaultInstance();
  LogoutReq::default_instance_->InitAsDefaultInstance();
  LogoutRsp::default_instance_->InitAsDefaultInstance();
  ServiceRouteReqSToV::default_instance_->InitAsDefaultInstance();
  ServiceRouteRspSToV::default_instance_->InitAsDefaultInstance();
  ServiceRouteReqVToS::default_instance_->InitAsDefaultInstance();
  ServiceRouteStatusNty::default_instance_->InitAsDefaultInstance();
  ServiceRouteReqVToV::default_instance_->InitAsDefaultInstance();
  ServiceRouteRspVToV::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dzh_5fbus_5finterface_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dzh_5fbus_5finterface_2eproto {
  StaticDescriptorInitializer_dzh_5fbus_5finterface_2eproto() {
    protobuf_AddDesc_dzh_5fbus_5finterface_2eproto();
  }
} static_descriptor_initializer_dzh_5fbus_5finterface_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Bus_Head::kBodyTypeFieldNumber;
const int Bus_Head::kRequestIDFieldNumber;
const int Bus_Head::kEndFlagFieldNumber;
const int Bus_Head::kBodyFieldNumber;
#endif  // !_MSC_VER

Bus_Head::Bus_Head()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Bus_Head::InitAsDefaultInstance() {
  body_ = const_cast< ::dzh_bus_interface::Body*>(&::dzh_bus_interface::Body::default_instance());
}

Bus_Head::Bus_Head(const Bus_Head& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Bus_Head::SharedCtor() {
  _cached_size_ = 0;
  bodytype_ = 0u;
  requestid_ = 0u;
  endflag_ = 0u;
  body_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bus_Head::~Bus_Head() {
  SharedDtor();
}

void Bus_Head::SharedDtor() {
  if (this != default_instance_) {
    delete body_;
  }
}

void Bus_Head::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bus_Head::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bus_Head_descriptor_;
}

const Bus_Head& Bus_Head::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dzh_5fbus_5finterface_2eproto();
  return *default_instance_;
}

Bus_Head* Bus_Head::default_instance_ = NULL;

Bus_Head* Bus_Head::New() const {
  return new Bus_Head;
}

void Bus_Head::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bodytype_ = 0u;
    requestid_ = 0u;
    endflag_ = 0u;
    if (has_body()) {
      if (body_ != NULL) body_->::dzh_bus_interface::Body::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bus_Head::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 BodyType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bodytype_)));
          set_has_bodytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RequestID;
        break;
      }

      // required uint32 RequestID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RequestID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_EndFlag;
        break;
      }

      // required uint32 EndFlag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EndFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endflag_)));
          set_has_endflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_body;
        break;
      }

      // optional .dzh_bus_interface.Body body = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bus_Head::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 BodyType = 1;
  if (has_bodytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bodytype(), output);
  }

  // required uint32 RequestID = 2;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->requestid(), output);
  }

  // required uint32 EndFlag = 3;
  if (has_endflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->endflag(), output);
  }

  // optional .dzh_bus_interface.Body body = 4;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Bus_Head::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 BodyType = 1;
  if (has_bodytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bodytype(), target);
  }

  // required uint32 RequestID = 2;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->requestid(), target);
  }

  // required uint32 EndFlag = 3;
  if (has_endflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->endflag(), target);
  }

  // optional .dzh_bus_interface.Body body = 4;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Bus_Head::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 BodyType = 1;
    if (has_bodytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bodytype());
    }

    // required uint32 RequestID = 2;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->requestid());
    }

    // required uint32 EndFlag = 3;
    if (has_endflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endflag());
    }

    // optional .dzh_bus_interface.Body body = 4;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bus_Head::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bus_Head* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bus_Head*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bus_Head::MergeFrom(const Bus_Head& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bodytype()) {
      set_bodytype(from.bodytype());
    }
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_endflag()) {
      set_endflag(from.endflag());
    }
    if (from.has_body()) {
      mutable_body()->::dzh_bus_interface::Body::MergeFrom(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bus_Head::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bus_Head::CopyFrom(const Bus_Head& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bus_Head::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_body()) {
    if (!this->body().IsInitialized()) return false;
  }
  return true;
}

void Bus_Head::Swap(Bus_Head* other) {
  if (other != this) {
    std::swap(bodytype_, other->bodytype_);
    std::swap(requestid_, other->requestid_);
    std::swap(endflag_, other->endflag_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bus_Head::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bus_Head_descriptor_;
  metadata.reflection = Bus_Head_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Body::kLoginReqFieldNumber;
const int Body::kLoginRspFieldNumber;
const int Body::kLogoutReqFieldNumber;
const int Body::kLogoutRspFieldNumber;
const int Body::kServiceRouteReqSToVFieldNumber;
const int Body::kServiceRouteRspSToVFieldNumber;
const int Body::kServiceRouteReqVToSFieldNumber;
const int Body::kServiceRouteStatusNtyFieldNumber;
const int Body::kServiceRouteReqVToVFieldNumber;
const int Body::kServiceRouteRspVToVFieldNumber;
#endif  // !_MSC_VER

Body::Body()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Body::InitAsDefaultInstance() {
  loginreq_ = const_cast< ::dzh_bus_interface::LoginReq*>(&::dzh_bus_interface::LoginReq::default_instance());
  loginrsp_ = const_cast< ::dzh_bus_interface::LoginRsp*>(&::dzh_bus_interface::LoginRsp::default_instance());
  logoutreq_ = const_cast< ::dzh_bus_interface::LogoutReq*>(&::dzh_bus_interface::LogoutReq::default_instance());
  logoutrsp_ = const_cast< ::dzh_bus_interface::LogoutRsp*>(&::dzh_bus_interface::LogoutRsp::default_instance());
  serviceroutereqstov_ = const_cast< ::dzh_bus_interface::ServiceRouteReqSToV*>(&::dzh_bus_interface::ServiceRouteReqSToV::default_instance());
  servicerouterspstov_ = const_cast< ::dzh_bus_interface::ServiceRouteRspSToV*>(&::dzh_bus_interface::ServiceRouteRspSToV::default_instance());
  serviceroutereqvtos_ = const_cast< ::dzh_bus_interface::ServiceRouteReqVToS*>(&::dzh_bus_interface::ServiceRouteReqVToS::default_instance());
  serviceroutestatusnty_ = const_cast< ::dzh_bus_interface::ServiceRouteStatusNty*>(&::dzh_bus_interface::ServiceRouteStatusNty::default_instance());
  serviceroutereqvtov_ = const_cast< ::dzh_bus_interface::ServiceRouteReqVToV*>(&::dzh_bus_interface::ServiceRouteReqVToV::default_instance());
  servicerouterspvtov_ = const_cast< ::dzh_bus_interface::ServiceRouteRspVToV*>(&::dzh_bus_interface::ServiceRouteRspVToV::default_instance());
}

Body::Body(const Body& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Body::SharedCtor() {
  _cached_size_ = 0;
  loginreq_ = NULL;
  loginrsp_ = NULL;
  logoutreq_ = NULL;
  logoutrsp_ = NULL;
  serviceroutereqstov_ = NULL;
  servicerouterspstov_ = NULL;
  serviceroutereqvtos_ = NULL;
  serviceroutestatusnty_ = NULL;
  serviceroutereqvtov_ = NULL;
  servicerouterspvtov_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Body::~Body() {
  SharedDtor();
}

void Body::SharedDtor() {
  if (this != default_instance_) {
    delete loginreq_;
    delete loginrsp_;
    delete logoutreq_;
    delete logoutrsp_;
    delete serviceroutereqstov_;
    delete servicerouterspstov_;
    delete serviceroutereqvtos_;
    delete serviceroutestatusnty_;
    delete serviceroutereqvtov_;
    delete servicerouterspvtov_;
  }
}

void Body::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Body::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Body_descriptor_;
}

const Body& Body::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dzh_5fbus_5finterface_2eproto();
  return *default_instance_;
}

Body* Body::default_instance_ = NULL;

Body* Body::New() const {
  return new Body;
}

void Body::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_loginreq()) {
      if (loginreq_ != NULL) loginreq_->::dzh_bus_interface::LoginReq::Clear();
    }
    if (has_loginrsp()) {
      if (loginrsp_ != NULL) loginrsp_->::dzh_bus_interface::LoginRsp::Clear();
    }
    if (has_logoutreq()) {
      if (logoutreq_ != NULL) logoutreq_->::dzh_bus_interface::LogoutReq::Clear();
    }
    if (has_logoutrsp()) {
      if (logoutrsp_ != NULL) logoutrsp_->::dzh_bus_interface::LogoutRsp::Clear();
    }
    if (has_serviceroutereqstov()) {
      if (serviceroutereqstov_ != NULL) serviceroutereqstov_->::dzh_bus_interface::ServiceRouteReqSToV::Clear();
    }
    if (has_servicerouterspstov()) {
      if (servicerouterspstov_ != NULL) servicerouterspstov_->::dzh_bus_interface::ServiceRouteRspSToV::Clear();
    }
    if (has_serviceroutereqvtos()) {
      if (serviceroutereqvtos_ != NULL) serviceroutereqvtos_->::dzh_bus_interface::ServiceRouteReqVToS::Clear();
    }
    if (has_serviceroutestatusnty()) {
      if (serviceroutestatusnty_ != NULL) serviceroutestatusnty_->::dzh_bus_interface::ServiceRouteStatusNty::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_serviceroutereqvtov()) {
      if (serviceroutereqvtov_ != NULL) serviceroutereqvtov_->::dzh_bus_interface::ServiceRouteReqVToV::Clear();
    }
    if (has_servicerouterspvtov()) {
      if (servicerouterspvtov_ != NULL) servicerouterspvtov_->::dzh_bus_interface::ServiceRouteRspVToV::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Body::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dzh_bus_interface.LoginReq loginReq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_loginRsp;
        break;
      }

      // optional .dzh_bus_interface.LoginRsp loginRsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_logoutReq;
        break;
      }

      // optional .dzh_bus_interface.LogoutReq logoutReq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logoutReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logoutreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_logoutRsp;
        break;
      }

      // optional .dzh_bus_interface.LogoutRsp logoutRsp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logoutRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logoutrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_serviceRouteReqSToV;
        break;
      }

      // optional .dzh_bus_interface.ServiceRouteReqSToV serviceRouteReqSToV = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serviceRouteReqSToV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serviceroutereqstov()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_serviceRouteRspSToV;
        break;
      }

      // optional .dzh_bus_interface.ServiceRouteRspSToV serviceRouteRspSToV = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serviceRouteRspSToV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_servicerouterspstov()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_serviceRouteReqVToS;
        break;
      }

      // optional .dzh_bus_interface.ServiceRouteReqVToS serviceRouteReqVToS = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serviceRouteReqVToS:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serviceroutereqvtos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_serviceRouteStatusNty;
        break;
      }

      // optional .dzh_bus_interface.ServiceRouteStatusNty serviceRouteStatusNty = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serviceRouteStatusNty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serviceroutestatusnty()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_serviceRouteReqVToV;
        break;
      }

      // optional .dzh_bus_interface.ServiceRouteReqVToV serviceRouteReqVToV = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serviceRouteReqVToV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serviceroutereqvtov()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_serviceRouteRspVToV;
        break;
      }

      // optional .dzh_bus_interface.ServiceRouteRspVToV serviceRouteRspVToV = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serviceRouteRspVToV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_servicerouterspvtov()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Body::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dzh_bus_interface.LoginReq loginReq = 1;
  if (has_loginreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->loginreq(), output);
  }

  // optional .dzh_bus_interface.LoginRsp loginRsp = 2;
  if (has_loginrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->loginrsp(), output);
  }

  // optional .dzh_bus_interface.LogoutReq logoutReq = 3;
  if (has_logoutreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->logoutreq(), output);
  }

  // optional .dzh_bus_interface.LogoutRsp logoutRsp = 4;
  if (has_logoutrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->logoutrsp(), output);
  }

  // optional .dzh_bus_interface.ServiceRouteReqSToV serviceRouteReqSToV = 5;
  if (has_serviceroutereqstov()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->serviceroutereqstov(), output);
  }

  // optional .dzh_bus_interface.ServiceRouteRspSToV serviceRouteRspSToV = 6;
  if (has_servicerouterspstov()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->servicerouterspstov(), output);
  }

  // optional .dzh_bus_interface.ServiceRouteReqVToS serviceRouteReqVToS = 7;
  if (has_serviceroutereqvtos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->serviceroutereqvtos(), output);
  }

  // optional .dzh_bus_interface.ServiceRouteStatusNty serviceRouteStatusNty = 8;
  if (has_serviceroutestatusnty()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->serviceroutestatusnty(), output);
  }

  // optional .dzh_bus_interface.ServiceRouteReqVToV serviceRouteReqVToV = 9;
  if (has_serviceroutereqvtov()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->serviceroutereqvtov(), output);
  }

  // optional .dzh_bus_interface.ServiceRouteRspVToV serviceRouteRspVToV = 10;
  if (has_servicerouterspvtov()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->servicerouterspvtov(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Body::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dzh_bus_interface.LoginReq loginReq = 1;
  if (has_loginreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->loginreq(), target);
  }

  // optional .dzh_bus_interface.LoginRsp loginRsp = 2;
  if (has_loginrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->loginrsp(), target);
  }

  // optional .dzh_bus_interface.LogoutReq logoutReq = 3;
  if (has_logoutreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->logoutreq(), target);
  }

  // optional .dzh_bus_interface.LogoutRsp logoutRsp = 4;
  if (has_logoutrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->logoutrsp(), target);
  }

  // optional .dzh_bus_interface.ServiceRouteReqSToV serviceRouteReqSToV = 5;
  if (has_serviceroutereqstov()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->serviceroutereqstov(), target);
  }

  // optional .dzh_bus_interface.ServiceRouteRspSToV serviceRouteRspSToV = 6;
  if (has_servicerouterspstov()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->servicerouterspstov(), target);
  }

  // optional .dzh_bus_interface.ServiceRouteReqVToS serviceRouteReqVToS = 7;
  if (has_serviceroutereqvtos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->serviceroutereqvtos(), target);
  }

  // optional .dzh_bus_interface.ServiceRouteStatusNty serviceRouteStatusNty = 8;
  if (has_serviceroutestatusnty()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->serviceroutestatusnty(), target);
  }

  // optional .dzh_bus_interface.ServiceRouteReqVToV serviceRouteReqVToV = 9;
  if (has_serviceroutereqvtov()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->serviceroutereqvtov(), target);
  }

  // optional .dzh_bus_interface.ServiceRouteRspVToV serviceRouteRspVToV = 10;
  if (has_servicerouterspvtov()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->servicerouterspvtov(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Body::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dzh_bus_interface.LoginReq loginReq = 1;
    if (has_loginreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loginreq());
    }

    // optional .dzh_bus_interface.LoginRsp loginRsp = 2;
    if (has_loginrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loginrsp());
    }

    // optional .dzh_bus_interface.LogoutReq logoutReq = 3;
    if (has_logoutreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logoutreq());
    }

    // optional .dzh_bus_interface.LogoutRsp logoutRsp = 4;
    if (has_logoutrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logoutrsp());
    }

    // optional .dzh_bus_interface.ServiceRouteReqSToV serviceRouteReqSToV = 5;
    if (has_serviceroutereqstov()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serviceroutereqstov());
    }

    // optional .dzh_bus_interface.ServiceRouteRspSToV serviceRouteRspSToV = 6;
    if (has_servicerouterspstov()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->servicerouterspstov());
    }

    // optional .dzh_bus_interface.ServiceRouteReqVToS serviceRouteReqVToS = 7;
    if (has_serviceroutereqvtos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serviceroutereqvtos());
    }

    // optional .dzh_bus_interface.ServiceRouteStatusNty serviceRouteStatusNty = 8;
    if (has_serviceroutestatusnty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serviceroutestatusnty());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .dzh_bus_interface.ServiceRouteReqVToV serviceRouteReqVToV = 9;
    if (has_serviceroutereqvtov()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serviceroutereqvtov());
    }

    // optional .dzh_bus_interface.ServiceRouteRspVToV serviceRouteRspVToV = 10;
    if (has_servicerouterspvtov()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->servicerouterspvtov());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Body::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Body* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Body*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Body::MergeFrom(const Body& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loginreq()) {
      mutable_loginreq()->::dzh_bus_interface::LoginReq::MergeFrom(from.loginreq());
    }
    if (from.has_loginrsp()) {
      mutable_loginrsp()->::dzh_bus_interface::LoginRsp::MergeFrom(from.loginrsp());
    }
    if (from.has_logoutreq()) {
      mutable_logoutreq()->::dzh_bus_interface::LogoutReq::MergeFrom(from.logoutreq());
    }
    if (from.has_logoutrsp()) {
      mutable_logoutrsp()->::dzh_bus_interface::LogoutRsp::MergeFrom(from.logoutrsp());
    }
    if (from.has_serviceroutereqstov()) {
      mutable_serviceroutereqstov()->::dzh_bus_interface::ServiceRouteReqSToV::MergeFrom(from.serviceroutereqstov());
    }
    if (from.has_servicerouterspstov()) {
      mutable_servicerouterspstov()->::dzh_bus_interface::ServiceRouteRspSToV::MergeFrom(from.servicerouterspstov());
    }
    if (from.has_serviceroutereqvtos()) {
      mutable_serviceroutereqvtos()->::dzh_bus_interface::ServiceRouteReqVToS::MergeFrom(from.serviceroutereqvtos());
    }
    if (from.has_serviceroutestatusnty()) {
      mutable_serviceroutestatusnty()->::dzh_bus_interface::ServiceRouteStatusNty::MergeFrom(from.serviceroutestatusnty());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_serviceroutereqvtov()) {
      mutable_serviceroutereqvtov()->::dzh_bus_interface::ServiceRouteReqVToV::MergeFrom(from.serviceroutereqvtov());
    }
    if (from.has_servicerouterspvtov()) {
      mutable_servicerouterspvtov()->::dzh_bus_interface::ServiceRouteRspVToV::MergeFrom(from.servicerouterspvtov());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Body::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Body::CopyFrom(const Body& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Body::IsInitialized() const {

  if (has_loginrsp()) {
    if (!this->loginrsp().IsInitialized()) return false;
  }
  if (has_servicerouterspstov()) {
    if (!this->servicerouterspstov().IsInitialized()) return false;
  }
  if (has_servicerouterspvtov()) {
    if (!this->servicerouterspvtov().IsInitialized()) return false;
  }
  return true;
}

void Body::Swap(Body* other) {
  if (other != this) {
    std::swap(loginreq_, other->loginreq_);
    std::swap(loginrsp_, other->loginrsp_);
    std::swap(logoutreq_, other->logoutreq_);
    std::swap(logoutrsp_, other->logoutrsp_);
    std::swap(serviceroutereqstov_, other->serviceroutereqstov_);
    std::swap(servicerouterspstov_, other->servicerouterspstov_);
    std::swap(serviceroutereqvtos_, other->serviceroutereqvtos_);
    std::swap(serviceroutestatusnty_, other->serviceroutestatusnty_);
    std::swap(serviceroutereqvtov_, other->serviceroutereqvtov_);
    std::swap(servicerouterspvtov_, other->servicerouterspvtov_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Body::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Body_descriptor_;
  metadata.reflection = Body_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspInfo::kRspNoFieldNumber;
const int RspInfo::kRspDescFieldNumber;
#endif  // !_MSC_VER

RspInfo::RspInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspInfo::InitAsDefaultInstance() {
}

RspInfo::RspInfo(const RspInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspInfo::SharedCtor() {
  _cached_size_ = 0;
  rspno_ = 0u;
  rspdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspInfo::~RspInfo() {
  SharedDtor();
}

void RspInfo::SharedDtor() {
  if (rspdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete rspdesc_;
  }
  if (this != default_instance_) {
  }
}

void RspInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspInfo_descriptor_;
}

const RspInfo& RspInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dzh_5fbus_5finterface_2eproto();
  return *default_instance_;
}

RspInfo* RspInfo::default_instance_ = NULL;

RspInfo* RspInfo::New() const {
  return new RspInfo;
}

void RspInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rspno_ = 0u;
    if (has_rspdesc()) {
      if (rspdesc_ != &::google::protobuf::internal::kEmptyString) {
        rspdesc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 RspNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rspno_)));
          set_has_rspno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RspDesc;
        break;
      }

      // required string RspDesc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RspDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rspdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rspdesc().data(), this->rspdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 RspNo = 1;
  if (has_rspno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rspno(), output);
  }

  // required string RspDesc = 2;
  if (has_rspdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rspdesc().data(), this->rspdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rspdesc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 RspNo = 1;
  if (has_rspno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rspno(), target);
  }

  // required string RspDesc = 2;
  if (has_rspdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rspdesc().data(), this->rspdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rspdesc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 RspNo = 1;
    if (has_rspno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rspno());
    }

    // required string RspDesc = 2;
    if (has_rspdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rspdesc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspInfo::MergeFrom(const RspInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rspno()) {
      set_rspno(from.rspno());
    }
    if (from.has_rspdesc()) {
      set_rspdesc(from.rspdesc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspInfo::CopyFrom(const RspInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RspInfo::Swap(RspInfo* other) {
  if (other != this) {
    std::swap(rspno_, other->rspno_);
    std::swap(rspdesc_, other->rspdesc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspInfo_descriptor_;
  metadata.reflection = RspInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginReq::kRouterNoFieldNumber;
const int LoginReq::kServerNoFieldNumber;
const int LoginReq::kServiceNoFieldNumber;
#endif  // !_MSC_VER

LoginReq::LoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginReq::InitAsDefaultInstance() {
}

LoginReq::LoginReq(const LoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginReq::SharedCtor() {
  _cached_size_ = 0;
  routerno_ = 0u;
  serverno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginReq::~LoginReq() {
  SharedDtor();
}

void LoginReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginReq_descriptor_;
}

const LoginReq& LoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dzh_5fbus_5finterface_2eproto();
  return *default_instance_;
}

LoginReq* LoginReq::default_instance_ = NULL;

LoginReq* LoginReq::New() const {
  return new LoginReq;
}

void LoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    routerno_ = 0u;
    serverno_ = 0u;
  }
  serviceno_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RouterNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &routerno_)));
          set_has_routerno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ServerNo;
        break;
      }

      // optional uint32 ServerNo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServerNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverno_)));
          set_has_serverno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ServiceNo;
        break;
      }

      // repeated uint32 ServiceNo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServiceNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_serviceno())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_serviceno())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ServiceNo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 RouterNo = 1;
  if (has_routerno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->routerno(), output);
  }

  // optional uint32 ServerNo = 2;
  if (has_serverno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverno(), output);
  }

  // repeated uint32 ServiceNo = 3;
  for (int i = 0; i < this->serviceno_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->serviceno(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RouterNo = 1;
  if (has_routerno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->routerno(), target);
  }

  // optional uint32 ServerNo = 2;
  if (has_serverno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverno(), target);
  }

  // repeated uint32 ServiceNo = 3;
  for (int i = 0; i < this->serviceno_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->serviceno(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RouterNo = 1;
    if (has_routerno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->routerno());
    }

    // optional uint32 ServerNo = 2;
    if (has_serverno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverno());
    }

  }
  // repeated uint32 ServiceNo = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->serviceno_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->serviceno(i));
    }
    total_size += 1 * this->serviceno_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginReq::MergeFrom(const LoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  serviceno_.MergeFrom(from.serviceno_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_routerno()) {
      set_routerno(from.routerno());
    }
    if (from.has_serverno()) {
      set_serverno(from.serverno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReq::CopyFrom(const LoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReq::IsInitialized() const {

  return true;
}

void LoginReq::Swap(LoginReq* other) {
  if (other != this) {
    std::swap(routerno_, other->routerno_);
    std::swap(serverno_, other->serverno_);
    serviceno_.Swap(&other->serviceno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginReq_descriptor_;
  metadata.reflection = LoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRsp::kRspInfoFieldNumber;
const int LoginRsp::kSessionNoFieldNumber;
const int LoginRsp::kRouterNoFieldNumber;
#endif  // !_MSC_VER

LoginRsp::LoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRsp::InitAsDefaultInstance() {
  rspinfo_ = const_cast< ::dzh_bus_interface::RspInfo*>(&::dzh_bus_interface::RspInfo::default_instance());
}

LoginRsp::LoginRsp(const LoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRsp::SharedCtor() {
  _cached_size_ = 0;
  rspinfo_ = NULL;
  sessionno_ = 0u;
  routerno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRsp::~LoginRsp() {
  SharedDtor();
}

void LoginRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rspinfo_;
  }
}

void LoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRsp_descriptor_;
}

const LoginRsp& LoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dzh_5fbus_5finterface_2eproto();
  return *default_instance_;
}

LoginRsp* LoginRsp::default_instance_ = NULL;

LoginRsp* LoginRsp::New() const {
  return new LoginRsp;
}

void LoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rspinfo()) {
      if (rspinfo_ != NULL) rspinfo_->::dzh_bus_interface::RspInfo::Clear();
    }
    sessionno_ = 0u;
    routerno_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .dzh_bus_interface.RspInfo rspInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rspinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SessionNo;
        break;
      }

      // optional uint32 SessionNo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SessionNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionno_)));
          set_has_sessionno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_RouterNo;
        break;
      }

      // optional uint32 RouterNo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RouterNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &routerno_)));
          set_has_routerno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .dzh_bus_interface.RspInfo rspInfo = 1;
  if (has_rspinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rspinfo(), output);
  }

  // optional uint32 SessionNo = 2;
  if (has_sessionno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sessionno(), output);
  }

  // optional uint32 RouterNo = 3;
  if (has_routerno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->routerno(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .dzh_bus_interface.RspInfo rspInfo = 1;
  if (has_rspinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rspinfo(), target);
  }

  // optional uint32 SessionNo = 2;
  if (has_sessionno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sessionno(), target);
  }

  // optional uint32 RouterNo = 3;
  if (has_routerno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->routerno(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .dzh_bus_interface.RspInfo rspInfo = 1;
    if (has_rspinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rspinfo());
    }

    // optional uint32 SessionNo = 2;
    if (has_sessionno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionno());
    }

    // optional uint32 RouterNo = 3;
    if (has_routerno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->routerno());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRsp::MergeFrom(const LoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rspinfo()) {
      mutable_rspinfo()->::dzh_bus_interface::RspInfo::MergeFrom(from.rspinfo());
    }
    if (from.has_sessionno()) {
      set_sessionno(from.sessionno());
    }
    if (from.has_routerno()) {
      set_routerno(from.routerno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRsp::CopyFrom(const LoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rspinfo()) {
    if (!this->rspinfo().IsInitialized()) return false;
  }
  return true;
}

void LoginRsp::Swap(LoginRsp* other) {
  if (other != this) {
    std::swap(rspinfo_, other->rspinfo_);
    std::swap(sessionno_, other->sessionno_);
    std::swap(routerno_, other->routerno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRsp_descriptor_;
  metadata.reflection = LoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LogoutReq::LogoutReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogoutReq::InitAsDefaultInstance() {
}

LogoutReq::LogoutReq(const LogoutReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogoutReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutReq::~LogoutReq() {
  SharedDtor();
}

void LogoutReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogoutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutReq_descriptor_;
}

const LogoutReq& LogoutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dzh_5fbus_5finterface_2eproto();
  return *default_instance_;
}

LogoutReq* LogoutReq::default_instance_ = NULL;

LogoutReq* LogoutReq::New() const {
  return new LogoutReq;
}

void LogoutReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void LogoutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogoutReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogoutReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutReq::MergeFrom(const LogoutReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutReq::CopyFrom(const LogoutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutReq::IsInitialized() const {

  return true;
}

void LogoutReq::Swap(LogoutReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutReq_descriptor_;
  metadata.reflection = LogoutReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LogoutRsp::LogoutRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogoutRsp::InitAsDefaultInstance() {
}

LogoutRsp::LogoutRsp(const LogoutRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogoutRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutRsp::~LogoutRsp() {
  SharedDtor();
}

void LogoutRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogoutRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutRsp_descriptor_;
}

const LogoutRsp& LogoutRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dzh_5fbus_5finterface_2eproto();
  return *default_instance_;
}

LogoutRsp* LogoutRsp::default_instance_ = NULL;

LogoutRsp* LogoutRsp::New() const {
  return new LogoutRsp;
}

void LogoutRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void LogoutRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogoutRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogoutRsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutRsp::MergeFrom(const LogoutRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutRsp::CopyFrom(const LogoutRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRsp::IsInitialized() const {

  return true;
}

void LogoutRsp::Swap(LogoutRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutRsp_descriptor_;
  metadata.reflection = LogoutRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceRouteReqSToV::kDestRouterNoFieldNumber;
const int ServiceRouteReqSToV::kDestServerNoFieldNumber;
const int ServiceRouteReqSToV::kDestSessionNoFieldNumber;
const int ServiceRouteReqSToV::kServiceNoFieldNumber;
const int ServiceRouteReqSToV::kSeqNoFieldNumber;
const int ServiceRouteReqSToV::kServiceFlagsFieldNumber;
#endif  // !_MSC_VER

ServiceRouteReqSToV::ServiceRouteReqSToV()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceRouteReqSToV::InitAsDefaultInstance() {
}

ServiceRouteReqSToV::ServiceRouteReqSToV(const ServiceRouteReqSToV& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceRouteReqSToV::SharedCtor() {
  _cached_size_ = 0;
  destrouterno_ = 0u;
  destserverno_ = 0u;
  destsessionno_ = 0u;
  serviceno_ = 0u;
  seqno_ = 0u;
  serviceflags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceRouteReqSToV::~ServiceRouteReqSToV() {
  SharedDtor();
}

void ServiceRouteReqSToV::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServiceRouteReqSToV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceRouteReqSToV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceRouteReqSToV_descriptor_;
}

const ServiceRouteReqSToV& ServiceRouteReqSToV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dzh_5fbus_5finterface_2eproto();
  return *default_instance_;
}

ServiceRouteReqSToV* ServiceRouteReqSToV::default_instance_ = NULL;

ServiceRouteReqSToV* ServiceRouteReqSToV::New() const {
  return new ServiceRouteReqSToV;
}

void ServiceRouteReqSToV::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    destrouterno_ = 0u;
    destserverno_ = 0u;
    destsessionno_ = 0u;
    serviceno_ = 0u;
    seqno_ = 0u;
    serviceflags_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceRouteReqSToV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 DestRouterNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destrouterno_)));
          set_has_destrouterno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DestServerNo;
        break;
      }

      // optional uint32 DestServerNo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DestServerNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destserverno_)));
          set_has_destserverno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DestSessionNo;
        break;
      }

      // optional uint32 DestSessionNo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DestSessionNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destsessionno_)));
          set_has_destsessionno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ServiceNo;
        break;
      }

      // optional uint32 ServiceNo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServiceNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serviceno_)));
          set_has_serviceno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_SeqNo;
        break;
      }

      // optional uint32 SeqNo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SeqNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ServiceFlags;
        break;
      }

      // optional uint32 ServiceFlags = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServiceFlags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serviceflags_)));
          set_has_serviceflags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceRouteReqSToV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 DestRouterNo = 1;
  if (has_destrouterno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->destrouterno(), output);
  }

  // optional uint32 DestServerNo = 2;
  if (has_destserverno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->destserverno(), output);
  }

  // optional uint32 DestSessionNo = 3;
  if (has_destsessionno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->destsessionno(), output);
  }

  // optional uint32 ServiceNo = 4;
  if (has_serviceno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->serviceno(), output);
  }

  // optional uint32 SeqNo = 5;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seqno(), output);
  }

  // optional uint32 ServiceFlags = 6;
  if (has_serviceflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->serviceflags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceRouteReqSToV::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 DestRouterNo = 1;
  if (has_destrouterno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->destrouterno(), target);
  }

  // optional uint32 DestServerNo = 2;
  if (has_destserverno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->destserverno(), target);
  }

  // optional uint32 DestSessionNo = 3;
  if (has_destsessionno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->destsessionno(), target);
  }

  // optional uint32 ServiceNo = 4;
  if (has_serviceno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->serviceno(), target);
  }

  // optional uint32 SeqNo = 5;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seqno(), target);
  }

  // optional uint32 ServiceFlags = 6;
  if (has_serviceflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->serviceflags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceRouteReqSToV::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 DestRouterNo = 1;
    if (has_destrouterno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destrouterno());
    }

    // optional uint32 DestServerNo = 2;
    if (has_destserverno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destserverno());
    }

    // optional uint32 DestSessionNo = 3;
    if (has_destsessionno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destsessionno());
    }

    // optional uint32 ServiceNo = 4;
    if (has_serviceno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serviceno());
    }

    // optional uint32 SeqNo = 5;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // optional uint32 ServiceFlags = 6;
    if (has_serviceflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serviceflags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceRouteReqSToV::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceRouteReqSToV* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceRouteReqSToV*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceRouteReqSToV::MergeFrom(const ServiceRouteReqSToV& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_destrouterno()) {
      set_destrouterno(from.destrouterno());
    }
    if (from.has_destserverno()) {
      set_destserverno(from.destserverno());
    }
    if (from.has_destsessionno()) {
      set_destsessionno(from.destsessionno());
    }
    if (from.has_serviceno()) {
      set_serviceno(from.serviceno());
    }
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_serviceflags()) {
      set_serviceflags(from.serviceflags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceRouteReqSToV::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceRouteReqSToV::CopyFrom(const ServiceRouteReqSToV& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceRouteReqSToV::IsInitialized() const {

  return true;
}

void ServiceRouteReqSToV::Swap(ServiceRouteReqSToV* other) {
  if (other != this) {
    std::swap(destrouterno_, other->destrouterno_);
    std::swap(destserverno_, other->destserverno_);
    std::swap(destsessionno_, other->destsessionno_);
    std::swap(serviceno_, other->serviceno_);
    std::swap(seqno_, other->seqno_);
    std::swap(serviceflags_, other->serviceflags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceRouteReqSToV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceRouteReqSToV_descriptor_;
  metadata.reflection = ServiceRouteReqSToV_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceRouteRspSToV::kRspInfoFieldNumber;
const int ServiceRouteRspSToV::kDestRouterNoFieldNumber;
const int ServiceRouteRspSToV::kDestServerNoFieldNumber;
const int ServiceRouteRspSToV::kDestSessionNoFieldNumber;
const int ServiceRouteRspSToV::kServiceNoFieldNumber;
const int ServiceRouteRspSToV::kSeqNoFieldNumber;
const int ServiceRouteRspSToV::kServiceFlagsFieldNumber;
#endif  // !_MSC_VER

ServiceRouteRspSToV::ServiceRouteRspSToV()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceRouteRspSToV::InitAsDefaultInstance() {
  rspinfo_ = const_cast< ::dzh_bus_interface::RspInfo*>(&::dzh_bus_interface::RspInfo::default_instance());
}

ServiceRouteRspSToV::ServiceRouteRspSToV(const ServiceRouteRspSToV& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceRouteRspSToV::SharedCtor() {
  _cached_size_ = 0;
  rspinfo_ = NULL;
  destrouterno_ = 0u;
  destserverno_ = 0u;
  destsessionno_ = 0u;
  serviceno_ = 0u;
  seqno_ = 0u;
  serviceflags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceRouteRspSToV::~ServiceRouteRspSToV() {
  SharedDtor();
}

void ServiceRouteRspSToV::SharedDtor() {
  if (this != default_instance_) {
    delete rspinfo_;
  }
}

void ServiceRouteRspSToV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceRouteRspSToV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceRouteRspSToV_descriptor_;
}

const ServiceRouteRspSToV& ServiceRouteRspSToV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dzh_5fbus_5finterface_2eproto();
  return *default_instance_;
}

ServiceRouteRspSToV* ServiceRouteRspSToV::default_instance_ = NULL;

ServiceRouteRspSToV* ServiceRouteRspSToV::New() const {
  return new ServiceRouteRspSToV;
}

void ServiceRouteRspSToV::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rspinfo()) {
      if (rspinfo_ != NULL) rspinfo_->::dzh_bus_interface::RspInfo::Clear();
    }
    destrouterno_ = 0u;
    destserverno_ = 0u;
    destsessionno_ = 0u;
    serviceno_ = 0u;
    seqno_ = 0u;
    serviceflags_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceRouteRspSToV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .dzh_bus_interface.RspInfo rspInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rspinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DestRouterNo;
        break;
      }

      // optional uint32 DestRouterNo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DestRouterNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destrouterno_)));
          set_has_destrouterno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DestServerNo;
        break;
      }

      // optional uint32 DestServerNo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DestServerNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destserverno_)));
          set_has_destserverno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_DestSessionNo;
        break;
      }

      // optional uint32 DestSessionNo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DestSessionNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destsessionno_)));
          set_has_destsessionno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ServiceNo;
        break;
      }

      // optional uint32 ServiceNo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServiceNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serviceno_)));
          set_has_serviceno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_SeqNo;
        break;
      }

      // optional uint32 SeqNo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SeqNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ServiceFlags;
        break;
      }

      // optional uint32 ServiceFlags = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServiceFlags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serviceflags_)));
          set_has_serviceflags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceRouteRspSToV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .dzh_bus_interface.RspInfo rspInfo = 1;
  if (has_rspinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rspinfo(), output);
  }

  // optional uint32 DestRouterNo = 2;
  if (has_destrouterno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->destrouterno(), output);
  }

  // optional uint32 DestServerNo = 3;
  if (has_destserverno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->destserverno(), output);
  }

  // optional uint32 DestSessionNo = 4;
  if (has_destsessionno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->destsessionno(), output);
  }

  // optional uint32 ServiceNo = 5;
  if (has_serviceno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->serviceno(), output);
  }

  // optional uint32 SeqNo = 6;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->seqno(), output);
  }

  // optional uint32 ServiceFlags = 7;
  if (has_serviceflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->serviceflags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceRouteRspSToV::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .dzh_bus_interface.RspInfo rspInfo = 1;
  if (has_rspinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rspinfo(), target);
  }

  // optional uint32 DestRouterNo = 2;
  if (has_destrouterno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->destrouterno(), target);
  }

  // optional uint32 DestServerNo = 3;
  if (has_destserverno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->destserverno(), target);
  }

  // optional uint32 DestSessionNo = 4;
  if (has_destsessionno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->destsessionno(), target);
  }

  // optional uint32 ServiceNo = 5;
  if (has_serviceno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->serviceno(), target);
  }

  // optional uint32 SeqNo = 6;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->seqno(), target);
  }

  // optional uint32 ServiceFlags = 7;
  if (has_serviceflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->serviceflags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceRouteRspSToV::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .dzh_bus_interface.RspInfo rspInfo = 1;
    if (has_rspinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rspinfo());
    }

    // optional uint32 DestRouterNo = 2;
    if (has_destrouterno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destrouterno());
    }

    // optional uint32 DestServerNo = 3;
    if (has_destserverno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destserverno());
    }

    // optional uint32 DestSessionNo = 4;
    if (has_destsessionno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destsessionno());
    }

    // optional uint32 ServiceNo = 5;
    if (has_serviceno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serviceno());
    }

    // optional uint32 SeqNo = 6;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // optional uint32 ServiceFlags = 7;
    if (has_serviceflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serviceflags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceRouteRspSToV::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceRouteRspSToV* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceRouteRspSToV*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceRouteRspSToV::MergeFrom(const ServiceRouteRspSToV& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rspinfo()) {
      mutable_rspinfo()->::dzh_bus_interface::RspInfo::MergeFrom(from.rspinfo());
    }
    if (from.has_destrouterno()) {
      set_destrouterno(from.destrouterno());
    }
    if (from.has_destserverno()) {
      set_destserverno(from.destserverno());
    }
    if (from.has_destsessionno()) {
      set_destsessionno(from.destsessionno());
    }
    if (from.has_serviceno()) {
      set_serviceno(from.serviceno());
    }
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_serviceflags()) {
      set_serviceflags(from.serviceflags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceRouteRspSToV::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceRouteRspSToV::CopyFrom(const ServiceRouteRspSToV& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceRouteRspSToV::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rspinfo()) {
    if (!this->rspinfo().IsInitialized()) return false;
  }
  return true;
}

void ServiceRouteRspSToV::Swap(ServiceRouteRspSToV* other) {
  if (other != this) {
    std::swap(rspinfo_, other->rspinfo_);
    std::swap(destrouterno_, other->destrouterno_);
    std::swap(destserverno_, other->destserverno_);
    std::swap(destsessionno_, other->destsessionno_);
    std::swap(serviceno_, other->serviceno_);
    std::swap(seqno_, other->seqno_);
    std::swap(serviceflags_, other->serviceflags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceRouteRspSToV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceRouteRspSToV_descriptor_;
  metadata.reflection = ServiceRouteRspSToV_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceRouteReqVToS::kSrcRouterNoFieldNumber;
const int ServiceRouteReqVToS::kSrcServerNoFieldNumber;
const int ServiceRouteReqVToS::kSrcSessionNoFieldNumber;
const int ServiceRouteReqVToS::kServiceNoFieldNumber;
const int ServiceRouteReqVToS::kSeqNoFieldNumber;
const int ServiceRouteReqVToS::kServiceFlagsFieldNumber;
#endif  // !_MSC_VER

ServiceRouteReqVToS::ServiceRouteReqVToS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceRouteReqVToS::InitAsDefaultInstance() {
}

ServiceRouteReqVToS::ServiceRouteReqVToS(const ServiceRouteReqVToS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceRouteReqVToS::SharedCtor() {
  _cached_size_ = 0;
  srcrouterno_ = 0u;
  srcserverno_ = 0u;
  srcsessionno_ = 0u;
  serviceno_ = 0u;
  seqno_ = 0u;
  serviceflags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceRouteReqVToS::~ServiceRouteReqVToS() {
  SharedDtor();
}

void ServiceRouteReqVToS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServiceRouteReqVToS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceRouteReqVToS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceRouteReqVToS_descriptor_;
}

const ServiceRouteReqVToS& ServiceRouteReqVToS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dzh_5fbus_5finterface_2eproto();
  return *default_instance_;
}

ServiceRouteReqVToS* ServiceRouteReqVToS::default_instance_ = NULL;

ServiceRouteReqVToS* ServiceRouteReqVToS::New() const {
  return new ServiceRouteReqVToS;
}

void ServiceRouteReqVToS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcrouterno_ = 0u;
    srcserverno_ = 0u;
    srcsessionno_ = 0u;
    serviceno_ = 0u;
    seqno_ = 0u;
    serviceflags_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceRouteReqVToS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SrcRouterNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcrouterno_)));
          set_has_srcrouterno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SrcServerNo;
        break;
      }

      // optional uint32 SrcServerNo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SrcServerNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcserverno_)));
          set_has_srcserverno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SrcSessionNo;
        break;
      }

      // optional uint32 SrcSessionNo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SrcSessionNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcsessionno_)));
          set_has_srcsessionno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ServiceNo;
        break;
      }

      // optional uint32 ServiceNo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServiceNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serviceno_)));
          set_has_serviceno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_SeqNo;
        break;
      }

      // optional uint32 SeqNo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SeqNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ServiceFlags;
        break;
      }

      // optional uint32 ServiceFlags = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServiceFlags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serviceflags_)));
          set_has_serviceflags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceRouteReqVToS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 SrcRouterNo = 1;
  if (has_srcrouterno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->srcrouterno(), output);
  }

  // optional uint32 SrcServerNo = 2;
  if (has_srcserverno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->srcserverno(), output);
  }

  // optional uint32 SrcSessionNo = 3;
  if (has_srcsessionno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->srcsessionno(), output);
  }

  // optional uint32 ServiceNo = 4;
  if (has_serviceno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->serviceno(), output);
  }

  // optional uint32 SeqNo = 5;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seqno(), output);
  }

  // optional uint32 ServiceFlags = 6;
  if (has_serviceflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->serviceflags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceRouteReqVToS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SrcRouterNo = 1;
  if (has_srcrouterno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->srcrouterno(), target);
  }

  // optional uint32 SrcServerNo = 2;
  if (has_srcserverno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->srcserverno(), target);
  }

  // optional uint32 SrcSessionNo = 3;
  if (has_srcsessionno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->srcsessionno(), target);
  }

  // optional uint32 ServiceNo = 4;
  if (has_serviceno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->serviceno(), target);
  }

  // optional uint32 SeqNo = 5;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seqno(), target);
  }

  // optional uint32 ServiceFlags = 6;
  if (has_serviceflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->serviceflags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceRouteReqVToS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SrcRouterNo = 1;
    if (has_srcrouterno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcrouterno());
    }

    // optional uint32 SrcServerNo = 2;
    if (has_srcserverno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcserverno());
    }

    // optional uint32 SrcSessionNo = 3;
    if (has_srcsessionno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcsessionno());
    }

    // optional uint32 ServiceNo = 4;
    if (has_serviceno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serviceno());
    }

    // optional uint32 SeqNo = 5;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // optional uint32 ServiceFlags = 6;
    if (has_serviceflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serviceflags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceRouteReqVToS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceRouteReqVToS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceRouteReqVToS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceRouteReqVToS::MergeFrom(const ServiceRouteReqVToS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcrouterno()) {
      set_srcrouterno(from.srcrouterno());
    }
    if (from.has_srcserverno()) {
      set_srcserverno(from.srcserverno());
    }
    if (from.has_srcsessionno()) {
      set_srcsessionno(from.srcsessionno());
    }
    if (from.has_serviceno()) {
      set_serviceno(from.serviceno());
    }
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_serviceflags()) {
      set_serviceflags(from.serviceflags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceRouteReqVToS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceRouteReqVToS::CopyFrom(const ServiceRouteReqVToS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceRouteReqVToS::IsInitialized() const {

  return true;
}

void ServiceRouteReqVToS::Swap(ServiceRouteReqVToS* other) {
  if (other != this) {
    std::swap(srcrouterno_, other->srcrouterno_);
    std::swap(srcserverno_, other->srcserverno_);
    std::swap(srcsessionno_, other->srcsessionno_);
    std::swap(serviceno_, other->serviceno_);
    std::swap(seqno_, other->seqno_);
    std::swap(serviceflags_, other->serviceflags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceRouteReqVToS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceRouteReqVToS_descriptor_;
  metadata.reflection = ServiceRouteReqVToS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceRouteStatusNty::kRouterNoFieldNumber;
const int ServiceRouteStatusNty::kSeqNoFieldNumber;
#endif  // !_MSC_VER

ServiceRouteStatusNty::ServiceRouteStatusNty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceRouteStatusNty::InitAsDefaultInstance() {
}

ServiceRouteStatusNty::ServiceRouteStatusNty(const ServiceRouteStatusNty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceRouteStatusNty::SharedCtor() {
  _cached_size_ = 0;
  routerno_ = 0u;
  seqno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceRouteStatusNty::~ServiceRouteStatusNty() {
  SharedDtor();
}

void ServiceRouteStatusNty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServiceRouteStatusNty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceRouteStatusNty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceRouteStatusNty_descriptor_;
}

const ServiceRouteStatusNty& ServiceRouteStatusNty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dzh_5fbus_5finterface_2eproto();
  return *default_instance_;
}

ServiceRouteStatusNty* ServiceRouteStatusNty::default_instance_ = NULL;

ServiceRouteStatusNty* ServiceRouteStatusNty::New() const {
  return new ServiceRouteStatusNty;
}

void ServiceRouteStatusNty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    routerno_ = 0u;
    seqno_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceRouteStatusNty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RouterNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &routerno_)));
          set_has_routerno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SeqNo;
        break;
      }

      // optional uint32 SeqNo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SeqNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceRouteStatusNty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 RouterNo = 1;
  if (has_routerno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->routerno(), output);
  }

  // optional uint32 SeqNo = 2;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seqno(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceRouteStatusNty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RouterNo = 1;
  if (has_routerno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->routerno(), target);
  }

  // optional uint32 SeqNo = 2;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seqno(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceRouteStatusNty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RouterNo = 1;
    if (has_routerno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->routerno());
    }

    // optional uint32 SeqNo = 2;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceRouteStatusNty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceRouteStatusNty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceRouteStatusNty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceRouteStatusNty::MergeFrom(const ServiceRouteStatusNty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_routerno()) {
      set_routerno(from.routerno());
    }
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceRouteStatusNty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceRouteStatusNty::CopyFrom(const ServiceRouteStatusNty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceRouteStatusNty::IsInitialized() const {

  return true;
}

void ServiceRouteStatusNty::Swap(ServiceRouteStatusNty* other) {
  if (other != this) {
    std::swap(routerno_, other->routerno_);
    std::swap(seqno_, other->seqno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceRouteStatusNty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceRouteStatusNty_descriptor_;
  metadata.reflection = ServiceRouteStatusNty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceRouteReqVToV::kSrcRouterNoFieldNumber;
const int ServiceRouteReqVToV::kSrcSessionNoFieldNumber;
const int ServiceRouteReqVToV::kSrcServerNoFieldNumber;
const int ServiceRouteReqVToV::kDestRouterNoFieldNumber;
const int ServiceRouteReqVToV::kDestSessionNoFieldNumber;
const int ServiceRouteReqVToV::kDestServerNoFieldNumber;
const int ServiceRouteReqVToV::kServiceNoFieldNumber;
const int ServiceRouteReqVToV::kSeqNoFieldNumber;
const int ServiceRouteReqVToV::kServiceFlagsFieldNumber;
const int ServiceRouteReqVToV::kTTLFieldNumber;
const int ServiceRouteReqVToV::kProtocolNoFieldNumber;
#endif  // !_MSC_VER

ServiceRouteReqVToV::ServiceRouteReqVToV()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceRouteReqVToV::InitAsDefaultInstance() {
}

ServiceRouteReqVToV::ServiceRouteReqVToV(const ServiceRouteReqVToV& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceRouteReqVToV::SharedCtor() {
  _cached_size_ = 0;
  srcrouterno_ = 0u;
  srcsessionno_ = 0u;
  srcserverno_ = 0u;
  destrouterno_ = 0u;
  destsessionno_ = 0u;
  destserverno_ = 0u;
  serviceno_ = 0u;
  seqno_ = 0u;
  serviceflags_ = 0u;
  ttl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  protocolno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceRouteReqVToV::~ServiceRouteReqVToV() {
  SharedDtor();
}

void ServiceRouteReqVToV::SharedDtor() {
  if (ttl_ != &::google::protobuf::internal::kEmptyString) {
    delete ttl_;
  }
  if (this != default_instance_) {
  }
}

void ServiceRouteReqVToV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceRouteReqVToV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceRouteReqVToV_descriptor_;
}

const ServiceRouteReqVToV& ServiceRouteReqVToV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dzh_5fbus_5finterface_2eproto();
  return *default_instance_;
}

ServiceRouteReqVToV* ServiceRouteReqVToV::default_instance_ = NULL;

ServiceRouteReqVToV* ServiceRouteReqVToV::New() const {
  return new ServiceRouteReqVToV;
}

void ServiceRouteReqVToV::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcrouterno_ = 0u;
    srcsessionno_ = 0u;
    srcserverno_ = 0u;
    destrouterno_ = 0u;
    destsessionno_ = 0u;
    destserverno_ = 0u;
    serviceno_ = 0u;
    seqno_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    serviceflags_ = 0u;
    if (has_ttl()) {
      if (ttl_ != &::google::protobuf::internal::kEmptyString) {
        ttl_->clear();
      }
    }
    protocolno_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceRouteReqVToV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SrcRouterNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcrouterno_)));
          set_has_srcrouterno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SrcSessionNo;
        break;
      }

      // optional uint32 SrcSessionNo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SrcSessionNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcsessionno_)));
          set_has_srcsessionno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SrcServerNo;
        break;
      }

      // optional uint32 SrcServerNo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SrcServerNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcserverno_)));
          set_has_srcserverno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_DestRouterNo;
        break;
      }

      // optional uint32 DestRouterNo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DestRouterNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destrouterno_)));
          set_has_destrouterno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DestSessionNo;
        break;
      }

      // optional uint32 DestSessionNo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DestSessionNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destsessionno_)));
          set_has_destsessionno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_DestServerNo;
        break;
      }

      // optional uint32 DestServerNo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DestServerNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destserverno_)));
          set_has_destserverno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ServiceNo;
        break;
      }

      // optional uint32 ServiceNo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServiceNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serviceno_)));
          set_has_serviceno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_SeqNo;
        break;
      }

      // optional uint32 SeqNo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SeqNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ServiceFlags;
        break;
      }

      // optional uint32 ServiceFlags = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServiceFlags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serviceflags_)));
          set_has_serviceflags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_TTL;
        break;
      }

      // optional string TTL = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TTL:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ttl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ttl().data(), this->ttl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ProtocolNo;
        break;
      }

      // optional uint32 ProtocolNo = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ProtocolNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocolno_)));
          set_has_protocolno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceRouteReqVToV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 SrcRouterNo = 1;
  if (has_srcrouterno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->srcrouterno(), output);
  }

  // optional uint32 SrcSessionNo = 2;
  if (has_srcsessionno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->srcsessionno(), output);
  }

  // optional uint32 SrcServerNo = 3;
  if (has_srcserverno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->srcserverno(), output);
  }

  // optional uint32 DestRouterNo = 4;
  if (has_destrouterno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->destrouterno(), output);
  }

  // optional uint32 DestSessionNo = 5;
  if (has_destsessionno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->destsessionno(), output);
  }

  // optional uint32 DestServerNo = 6;
  if (has_destserverno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->destserverno(), output);
  }

  // optional uint32 ServiceNo = 7;
  if (has_serviceno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->serviceno(), output);
  }

  // optional uint32 SeqNo = 8;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->seqno(), output);
  }

  // optional uint32 ServiceFlags = 9;
  if (has_serviceflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->serviceflags(), output);
  }

  // optional string TTL = 10;
  if (has_ttl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ttl().data(), this->ttl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->ttl(), output);
  }

  // optional uint32 ProtocolNo = 11;
  if (has_protocolno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->protocolno(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceRouteReqVToV::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SrcRouterNo = 1;
  if (has_srcrouterno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->srcrouterno(), target);
  }

  // optional uint32 SrcSessionNo = 2;
  if (has_srcsessionno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->srcsessionno(), target);
  }

  // optional uint32 SrcServerNo = 3;
  if (has_srcserverno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->srcserverno(), target);
  }

  // optional uint32 DestRouterNo = 4;
  if (has_destrouterno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->destrouterno(), target);
  }

  // optional uint32 DestSessionNo = 5;
  if (has_destsessionno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->destsessionno(), target);
  }

  // optional uint32 DestServerNo = 6;
  if (has_destserverno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->destserverno(), target);
  }

  // optional uint32 ServiceNo = 7;
  if (has_serviceno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->serviceno(), target);
  }

  // optional uint32 SeqNo = 8;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->seqno(), target);
  }

  // optional uint32 ServiceFlags = 9;
  if (has_serviceflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->serviceflags(), target);
  }

  // optional string TTL = 10;
  if (has_ttl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ttl().data(), this->ttl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ttl(), target);
  }

  // optional uint32 ProtocolNo = 11;
  if (has_protocolno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->protocolno(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceRouteReqVToV::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SrcRouterNo = 1;
    if (has_srcrouterno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcrouterno());
    }

    // optional uint32 SrcSessionNo = 2;
    if (has_srcsessionno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcsessionno());
    }

    // optional uint32 SrcServerNo = 3;
    if (has_srcserverno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcserverno());
    }

    // optional uint32 DestRouterNo = 4;
    if (has_destrouterno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destrouterno());
    }

    // optional uint32 DestSessionNo = 5;
    if (has_destsessionno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destsessionno());
    }

    // optional uint32 DestServerNo = 6;
    if (has_destserverno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destserverno());
    }

    // optional uint32 ServiceNo = 7;
    if (has_serviceno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serviceno());
    }

    // optional uint32 SeqNo = 8;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 ServiceFlags = 9;
    if (has_serviceflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serviceflags());
    }

    // optional string TTL = 10;
    if (has_ttl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ttl());
    }

    // optional uint32 ProtocolNo = 11;
    if (has_protocolno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocolno());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceRouteReqVToV::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceRouteReqVToV* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceRouteReqVToV*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceRouteReqVToV::MergeFrom(const ServiceRouteReqVToV& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcrouterno()) {
      set_srcrouterno(from.srcrouterno());
    }
    if (from.has_srcsessionno()) {
      set_srcsessionno(from.srcsessionno());
    }
    if (from.has_srcserverno()) {
      set_srcserverno(from.srcserverno());
    }
    if (from.has_destrouterno()) {
      set_destrouterno(from.destrouterno());
    }
    if (from.has_destsessionno()) {
      set_destsessionno(from.destsessionno());
    }
    if (from.has_destserverno()) {
      set_destserverno(from.destserverno());
    }
    if (from.has_serviceno()) {
      set_serviceno(from.serviceno());
    }
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_serviceflags()) {
      set_serviceflags(from.serviceflags());
    }
    if (from.has_ttl()) {
      set_ttl(from.ttl());
    }
    if (from.has_protocolno()) {
      set_protocolno(from.protocolno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceRouteReqVToV::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceRouteReqVToV::CopyFrom(const ServiceRouteReqVToV& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceRouteReqVToV::IsInitialized() const {

  return true;
}

void ServiceRouteReqVToV::Swap(ServiceRouteReqVToV* other) {
  if (other != this) {
    std::swap(srcrouterno_, other->srcrouterno_);
    std::swap(srcsessionno_, other->srcsessionno_);
    std::swap(srcserverno_, other->srcserverno_);
    std::swap(destrouterno_, other->destrouterno_);
    std::swap(destsessionno_, other->destsessionno_);
    std::swap(destserverno_, other->destserverno_);
    std::swap(serviceno_, other->serviceno_);
    std::swap(seqno_, other->seqno_);
    std::swap(serviceflags_, other->serviceflags_);
    std::swap(ttl_, other->ttl_);
    std::swap(protocolno_, other->protocolno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceRouteReqVToV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceRouteReqVToV_descriptor_;
  metadata.reflection = ServiceRouteReqVToV_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceRouteRspVToV::kRspInfoFieldNumber;
const int ServiceRouteRspVToV::kSrcRouterNoFieldNumber;
const int ServiceRouteRspVToV::kSrcSessionNoFieldNumber;
const int ServiceRouteRspVToV::kSrcServerNoFieldNumber;
const int ServiceRouteRspVToV::kDestRouterNoFieldNumber;
const int ServiceRouteRspVToV::kDestSessionNoFieldNumber;
const int ServiceRouteRspVToV::kDestServerNoFieldNumber;
const int ServiceRouteRspVToV::kServiceNoFieldNumber;
const int ServiceRouteRspVToV::kSeqNoFieldNumber;
const int ServiceRouteRspVToV::kServiceFlagsFieldNumber;
const int ServiceRouteRspVToV::kTTLFieldNumber;
const int ServiceRouteRspVToV::kProtocolNoFieldNumber;
#endif  // !_MSC_VER

ServiceRouteRspVToV::ServiceRouteRspVToV()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceRouteRspVToV::InitAsDefaultInstance() {
  rspinfo_ = const_cast< ::dzh_bus_interface::RspInfo*>(&::dzh_bus_interface::RspInfo::default_instance());
}

ServiceRouteRspVToV::ServiceRouteRspVToV(const ServiceRouteRspVToV& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceRouteRspVToV::SharedCtor() {
  _cached_size_ = 0;
  rspinfo_ = NULL;
  srcrouterno_ = 0u;
  srcsessionno_ = 0u;
  srcserverno_ = 0u;
  destrouterno_ = 0u;
  destsessionno_ = 0u;
  destserverno_ = 0u;
  serviceno_ = 0u;
  seqno_ = 0u;
  serviceflags_ = 0u;
  ttl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  protocolno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceRouteRspVToV::~ServiceRouteRspVToV() {
  SharedDtor();
}

void ServiceRouteRspVToV::SharedDtor() {
  if (ttl_ != &::google::protobuf::internal::kEmptyString) {
    delete ttl_;
  }
  if (this != default_instance_) {
    delete rspinfo_;
  }
}

void ServiceRouteRspVToV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceRouteRspVToV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceRouteRspVToV_descriptor_;
}

const ServiceRouteRspVToV& ServiceRouteRspVToV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dzh_5fbus_5finterface_2eproto();
  return *default_instance_;
}

ServiceRouteRspVToV* ServiceRouteRspVToV::default_instance_ = NULL;

ServiceRouteRspVToV* ServiceRouteRspVToV::New() const {
  return new ServiceRouteRspVToV;
}

void ServiceRouteRspVToV::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rspinfo()) {
      if (rspinfo_ != NULL) rspinfo_->::dzh_bus_interface::RspInfo::Clear();
    }
    srcrouterno_ = 0u;
    srcsessionno_ = 0u;
    srcserverno_ = 0u;
    destrouterno_ = 0u;
    destsessionno_ = 0u;
    destserverno_ = 0u;
    serviceno_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    seqno_ = 0u;
    serviceflags_ = 0u;
    if (has_ttl()) {
      if (ttl_ != &::google::protobuf::internal::kEmptyString) {
        ttl_->clear();
      }
    }
    protocolno_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceRouteRspVToV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .dzh_bus_interface.RspInfo rspInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rspinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SrcRouterNo;
        break;
      }

      // optional uint32 SrcRouterNo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SrcRouterNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcrouterno_)));
          set_has_srcrouterno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SrcSessionNo;
        break;
      }

      // optional uint32 SrcSessionNo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SrcSessionNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcsessionno_)));
          set_has_srcsessionno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SrcServerNo;
        break;
      }

      // optional uint32 SrcServerNo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SrcServerNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcserverno_)));
          set_has_srcserverno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DestRouterNo;
        break;
      }

      // optional uint32 DestRouterNo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DestRouterNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destrouterno_)));
          set_has_destrouterno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_DestSessionNo;
        break;
      }

      // optional uint32 DestSessionNo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DestSessionNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destsessionno_)));
          set_has_destsessionno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_DestServerNo;
        break;
      }

      // optional uint32 DestServerNo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DestServerNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destserverno_)));
          set_has_destserverno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ServiceNo;
        break;
      }

      // optional uint32 ServiceNo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServiceNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serviceno_)));
          set_has_serviceno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_SeqNo;
        break;
      }

      // optional uint32 SeqNo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SeqNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ServiceFlags;
        break;
      }

      // optional uint32 ServiceFlags = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServiceFlags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serviceflags_)));
          set_has_serviceflags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_TTL;
        break;
      }

      // optional string TTL = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TTL:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ttl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ttl().data(), this->ttl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_ProtocolNo;
        break;
      }

      // optional uint32 ProtocolNo = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ProtocolNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocolno_)));
          set_has_protocolno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceRouteRspVToV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .dzh_bus_interface.RspInfo rspInfo = 1;
  if (has_rspinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rspinfo(), output);
  }

  // optional uint32 SrcRouterNo = 2;
  if (has_srcrouterno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->srcrouterno(), output);
  }

  // optional uint32 SrcSessionNo = 3;
  if (has_srcsessionno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->srcsessionno(), output);
  }

  // optional uint32 SrcServerNo = 4;
  if (has_srcserverno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->srcserverno(), output);
  }

  // optional uint32 DestRouterNo = 5;
  if (has_destrouterno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->destrouterno(), output);
  }

  // optional uint32 DestSessionNo = 6;
  if (has_destsessionno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->destsessionno(), output);
  }

  // optional uint32 DestServerNo = 7;
  if (has_destserverno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->destserverno(), output);
  }

  // optional uint32 ServiceNo = 8;
  if (has_serviceno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->serviceno(), output);
  }

  // optional uint32 SeqNo = 9;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->seqno(), output);
  }

  // optional uint32 ServiceFlags = 10;
  if (has_serviceflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->serviceflags(), output);
  }

  // optional string TTL = 11;
  if (has_ttl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ttl().data(), this->ttl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->ttl(), output);
  }

  // optional uint32 ProtocolNo = 12;
  if (has_protocolno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->protocolno(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceRouteRspVToV::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .dzh_bus_interface.RspInfo rspInfo = 1;
  if (has_rspinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rspinfo(), target);
  }

  // optional uint32 SrcRouterNo = 2;
  if (has_srcrouterno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->srcrouterno(), target);
  }

  // optional uint32 SrcSessionNo = 3;
  if (has_srcsessionno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->srcsessionno(), target);
  }

  // optional uint32 SrcServerNo = 4;
  if (has_srcserverno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->srcserverno(), target);
  }

  // optional uint32 DestRouterNo = 5;
  if (has_destrouterno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->destrouterno(), target);
  }

  // optional uint32 DestSessionNo = 6;
  if (has_destsessionno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->destsessionno(), target);
  }

  // optional uint32 DestServerNo = 7;
  if (has_destserverno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->destserverno(), target);
  }

  // optional uint32 ServiceNo = 8;
  if (has_serviceno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->serviceno(), target);
  }

  // optional uint32 SeqNo = 9;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->seqno(), target);
  }

  // optional uint32 ServiceFlags = 10;
  if (has_serviceflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->serviceflags(), target);
  }

  // optional string TTL = 11;
  if (has_ttl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ttl().data(), this->ttl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->ttl(), target);
  }

  // optional uint32 ProtocolNo = 12;
  if (has_protocolno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->protocolno(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceRouteRspVToV::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .dzh_bus_interface.RspInfo rspInfo = 1;
    if (has_rspinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rspinfo());
    }

    // optional uint32 SrcRouterNo = 2;
    if (has_srcrouterno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcrouterno());
    }

    // optional uint32 SrcSessionNo = 3;
    if (has_srcsessionno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcsessionno());
    }

    // optional uint32 SrcServerNo = 4;
    if (has_srcserverno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcserverno());
    }

    // optional uint32 DestRouterNo = 5;
    if (has_destrouterno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destrouterno());
    }

    // optional uint32 DestSessionNo = 6;
    if (has_destsessionno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destsessionno());
    }

    // optional uint32 DestServerNo = 7;
    if (has_destserverno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destserverno());
    }

    // optional uint32 ServiceNo = 8;
    if (has_serviceno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serviceno());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 SeqNo = 9;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // optional uint32 ServiceFlags = 10;
    if (has_serviceflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serviceflags());
    }

    // optional string TTL = 11;
    if (has_ttl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ttl());
    }

    // optional uint32 ProtocolNo = 12;
    if (has_protocolno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocolno());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceRouteRspVToV::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceRouteRspVToV* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceRouteRspVToV*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceRouteRspVToV::MergeFrom(const ServiceRouteRspVToV& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rspinfo()) {
      mutable_rspinfo()->::dzh_bus_interface::RspInfo::MergeFrom(from.rspinfo());
    }
    if (from.has_srcrouterno()) {
      set_srcrouterno(from.srcrouterno());
    }
    if (from.has_srcsessionno()) {
      set_srcsessionno(from.srcsessionno());
    }
    if (from.has_srcserverno()) {
      set_srcserverno(from.srcserverno());
    }
    if (from.has_destrouterno()) {
      set_destrouterno(from.destrouterno());
    }
    if (from.has_destsessionno()) {
      set_destsessionno(from.destsessionno());
    }
    if (from.has_destserverno()) {
      set_destserverno(from.destserverno());
    }
    if (from.has_serviceno()) {
      set_serviceno(from.serviceno());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_serviceflags()) {
      set_serviceflags(from.serviceflags());
    }
    if (from.has_ttl()) {
      set_ttl(from.ttl());
    }
    if (from.has_protocolno()) {
      set_protocolno(from.protocolno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceRouteRspVToV::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceRouteRspVToV::CopyFrom(const ServiceRouteRspVToV& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceRouteRspVToV::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rspinfo()) {
    if (!this->rspinfo().IsInitialized()) return false;
  }
  return true;
}

void ServiceRouteRspVToV::Swap(ServiceRouteRspVToV* other) {
  if (other != this) {
    std::swap(rspinfo_, other->rspinfo_);
    std::swap(srcrouterno_, other->srcrouterno_);
    std::swap(srcsessionno_, other->srcsessionno_);
    std::swap(srcserverno_, other->srcserverno_);
    std::swap(destrouterno_, other->destrouterno_);
    std::swap(destsessionno_, other->destsessionno_);
    std::swap(destserverno_, other->destserverno_);
    std::swap(serviceno_, other->serviceno_);
    std::swap(seqno_, other->seqno_);
    std::swap(serviceflags_, other->serviceflags_);
    std::swap(ttl_, other->ttl_);
    std::swap(protocolno_, other->protocolno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceRouteRspVToV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceRouteRspVToV_descriptor_;
  metadata.reflection = ServiceRouteRspVToV_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dzh_bus_interface

// @@protoc_insertion_point(global_scope)
